fig.align='center',
root.dir = '../'
)
pacman::p_load(tidyverse, bookdown, readr, dplyr)
# Read in the data
data <- readRDS('./board_game.rds')
# Display the first 10 lines of the data
head(data, 10)
# Read in the data
data <- readRDS('./board_game.rds')
# Display the first 10 lines of the data
head(data, 10)
columns <- c('primary', 'year', 'boardgamemechanic',
'minplaytime', 'maxplaytime', 'average')
data2 <- data %>% select(columns)
# Display the first 10 lines of the data
head(data2, 10)
# Display the column names
colnames(data2)
data3 <- data2 %>% rename(rating = average)
# Display the first 10 lines of the data
head(data3, 10)
colnames(data3)
data4 <- data3 %>%
filter((year >= 2016) & (year <= 2020))
# Display the first 10 lines of the data
head(data4, 10)
# Display the summary of the year variable
summary(data4$year)
# Create duration variable
data5 <- data4 %>%
mutate(duration = sqrt(minplaytime * maxplaytime))
# Remove zero duration
data5 <- data5 %>%
filter(duration != 0)
# Display the first 10 lines of the data
head(data5, 10)
# Display the summary of duration variable
summary(data5$duration)
data6 <- data5 %>%
mutate(
dice = ifelse(str_detect(boardgamemechanic, 'Dice'), 'Dice game', 'Not a dice game'),
dice = replace_na(dice, 'Not a dice game')
)
# Display the first 10 lines of the data
head(data6, 10)
# Display the count of dice observations
data6 %>% count(dice)
data7 <- data6 %>%
mutate(rating_7.5 = ifelse(rating >= 7.5, TRUE, FALSE))
# Display the first 10 lines of the data
head(data7, 10)
# Display the count of rating_7.5 observations
data7 %>% count(rating_7.5)
data7 %>%
ggplot(aes(x = factor(year), y = log(duration), fill = rating_7.5)) +
geom_boxplot(outlier.shape = 19) +
facet_wrap(. ~ dice, nrow = 2) +
labs(title = 'Game Duration by Year',
subtitle = 'Colour indicates if game has a rating of 7.5 or above.',
x = 'Year',
y = 'Duration (minutes)',
fill = expression('Rating' >= 7.5),
caption = 'Note: Games without a mechanic have been classified as "Not a dice game".') +
scale_y_continuous(
breaks = log(c(1, 10, 100, 1000, 10000)),
labels = c(1, 10, 100, 1000, 10000)
) +
scale_fill_manual(values = c("FALSE" = "#FFDF22", "TRUE" = "#0C8990")) +
theme_bw() +
theme(
#panel.border = element_rect(color = "black", fill = NA, linewidth = 0.3),
#strip.background = element_rect(color = "black", fill = 'lightgray', linewidth = 0.3),
legend.position = 'bottom'
)
unlink("a1_1903686_1_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE)
pacman::p_load(tidyverse, bookdown, readr, dplyr)
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.8, 0.2), each = 2)
)
get_ROC(df$obs, df$A)
get_ROC <- function(obs, pred) {
# Create a dataframe with 2 variables: 'obs' and 'pred'
data <- tibble(
obs = factor(obs),
pred = pred
)
# Remove duplicate rows
data <- data[!duplicated(data),]
# Sort predicted probabilities
data <- data %>% arrange(pred)
# Initialize vectors for thresholds, specificity, and sensitivity
thresholds <- c(-Inf, data$pred, Inf)
sens <- numeric(length(thresholds))
spec <- numeric(length(thresholds))
# Calculate sensitivity and specificity at each threshold
for (i in seq_along(thresholds)) {
threshold <- thresholds[i]
tp <- sum(data$pred >= threshold & data$obs == "A")
fp <- sum(data$pred >= threshold & data$obs == "B")
fn <- sum(data$pred < threshold & data$obs == "A")
tn <- sum(data$pred < threshold & data$obs == "B")
sens[i] <- tp / (tp + fn)
spec[i] <- tn / (tn + fp)
}
# Create a tibble with the results
roc_tibble <- tibble(
threshold = thresholds,
specificity = spec,
sensitivity = sens
)
return(roc_tibble)
}
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.8, 0.2), each = 2)
)
get_ROC(df$obs, df$A)
View(df)
df
get_ROC <- function(obs, A) {
# Check input types: obs is factor, A is numeric, and inputs are same length.
if (!is.factor(obs)) {
stop("obs should be a factor.")
}
if (!is.numeric(A)) {
stop("pred should be a numeric vector.")
}
if (length(obs) != length(A)) {
stop("obs and A should have the same length.")
}
# Check input values
if (length(levels(obs)) != 2 || !all(levels(obs) %in% c("A", "B"))) {
stop("obs should have two levels: 'A' and 'B'.")
}
if (any(A < 0 | A > 1)) {
stop("A should contain values between 0 and 1.")
}
# Create a dataframe with 2 variables: 'obs' and 'pred'
data <- tibble(
obs = factor(obs),
pred = A
)
# Remove duplicate rows
data <- data[!duplicated(data),]
# Sort predicted probabilities
data <- data %>% arrange(pred)
# Initialize vectors for thresholds, specificity, and sensitivity
thresholds <- c(-Inf, data$pred, Inf)
sens <- numeric(length(thresholds))
spec <- numeric(length(thresholds))
# Calculate sensitivity and specificity at each threshold
for (i in seq_along(thresholds)) {
threshold <- thresholds[i]
tp <- sum(data$pred >= threshold & data$obs == "A")
fp <- sum(data$pred >= threshold & data$obs == "B")
fn <- sum(data$pred < threshold & data$obs == "A")
tn <- sum(data$pred < threshold & data$obs == "B")
sens[i] <- tp / (tp + fn)
spec[i] <- tn / (tn + fp)
}
# Create a tibble with the results
roc_tibble <- tibble(
threshold = thresholds,
specificity = spec,
sensitivity = sens
)
return(roc_tibble)
}
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.8, 0.2), each = 2)
)
get_ROC(df$obs, df$A)
get_ROC <- function(obs, A) {
# Check input types
if (!is.factor(obs)) {
stop("obs should be a factor.")
}
if (!is.numeric(A)) {
stop("pred should be a numeric vector.")
}
if (length(obs) != length(A)) {
stop("obs and A should have the same length.")
}
# Check input values
if (length(levels(obs)) != 2 || !all(levels(obs) %in% c("A", "B"))) {
stop("obs should have two levels: 'A' and 'B'.")
}
if (any(A < 0 | A > 1)) {
stop("A should contain values between 0 and 1.")
}
# Create a dataframe with 2 variables: 'obs' and 'pred'
data <- tibble(
obs = factor(obs),
pred = A
)
# Remove duplicate rows
data <- data[!duplicated(data),]
# Sort predicted probabilities
data <- data %>% arrange(pred)
# Initialize vectors for thresholds, specificity, and sensitivity
thresholds <- c(-Inf, data$pred, Inf)
sens <- numeric(length(thresholds))
spec <- numeric(length(thresholds))
# Calculate sensitivity and specificity at each threshold
for (i in seq_along(thresholds)) {
threshold <- thresholds[i]
tp <- sum(data$pred >= threshold & data$obs == "A")
fp <- sum(data$pred >= threshold & data$obs == "B")
fn <- sum(data$pred < threshold & data$obs == "A")
tn <- sum(data$pred < threshold & data$obs == "B")
sens[i] <- tp / (tp + fn)
spec[i] <- tn / (tn + fp)
}
# Create a tibble with the results
roc_tibble <- tibble(
threshold = thresholds,
specificity = spec,
sensitivity = sens
)
return(roc_tibble)
}
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.8, -0.2), each = 2)
)
get_ROC(df$obs, df$A)
## Test function
df <- tibble(
obs = rep(factor(c("A")), each = 2),
A = rep(c(0.8), each = 2)
)
get_ROC(df$obs, df$A)
# Check input values
if (!all(levels(obs) %in% c("A", "B"))) {
stop("obs should have two levels: 'A' and 'B'.")
}
get_ROC <- function(obs, A) {
# Check input types
if (!is.factor(obs)) {
stop("obs should be a factor.")
}
if (!is.numeric(A)) {
stop("pred should be a numeric vector.")
}
if (length(obs) != length(A)) {
stop("obs and A should have the same length.")
}
# Check input values
if (!all(levels(obs) %in% c("A", "B"))) {
stop("obs should have two levels: 'A' and 'B'.")
}
if (any(A < 0 | A > 1)) {
stop("A should contain values between 0 and 1.")
}
# Create a dataframe with 2 variables: 'obs' and 'pred'
data <- tibble(
obs = factor(obs),
pred = A
)
# Remove duplicate rows
data <- data[!duplicated(data),]
# Sort predicted probabilities
data <- data %>% arrange(pred)
# Initialize vectors for thresholds, specificity, and sensitivity
thresholds <- c(-Inf, data$pred, Inf)
sens <- numeric(length(thresholds))
spec <- numeric(length(thresholds))
# Calculate sensitivity and specificity at each threshold
for (i in seq_along(thresholds)) {
threshold <- thresholds[i]
tp <- sum(data$pred >= threshold & data$obs == "A")
fp <- sum(data$pred >= threshold & data$obs == "B")
fn <- sum(data$pred < threshold & data$obs == "A")
tn <- sum(data$pred < threshold & data$obs == "B")
sens[i] <- tp / (tp + fn)
spec[i] <- tn / (tn + fp)
}
# Create a tibble with the results
roc_tibble <- tibble(
threshold = thresholds,
specificity = spec,
sensitivity = sens
)
return(roc_tibble)
}
## Test function
df <- tibble(
obs = rep(factor(c("A")), each = 2),
A = rep(c(0.8), each = 2)
)
get_ROC(df$obs, df$A)
## Test function
df <- tibble(
obs = rep(factor(c("A")), each = 2),
A = rep(c(1), each = 2)
)
get_ROC(df$obs, df$A)
get_ROC <- function(obs, A) {
# Check input types
if (!is.factor(obs)) {
stop("obs should be a factor.")
}
if (!is.numeric(A)) {
stop("pred should be a numeric vector.")
}
if (length(obs) != length(A)) {
stop("obs and A should have the same length.")
}
# Check input values
if (!all(levels(obs) %in% c("A", "B"))) {
stop("obs should have two levels: 'A' and 'B'.")
}
if (any(A < 0 | A > 1)) {
stop("A should contain values between 0 and 1.")
}
# Create a dataframe with 2 variables: 'obs' and 'pred'
data <- tibble(
obs = factor(obs),
pred = A
)
# Remove duplicate rows
data <- data[!duplicated(data),]
# Sort predicted probabilities
data <- data %>% arrange(pred)
# Initialize vectors for thresholds, specificity, and sensitivity
thresholds <- c(-Inf, data$pred, Inf)
sens <- numeric(length(thresholds))
spec <- numeric(length(thresholds))
# Calculate sensitivity and specificity at each threshold
for (i in seq_along(thresholds)) {
threshold <- thresholds[i]
tp <- sum(data$pred >= threshold & data$obs == "A")
fp <- sum(data$pred >= threshold & data$obs == "B")
fn <- sum(data$pred < threshold & data$obs == "A")
tn <- sum(data$pred < threshold & data$obs == "B")
sens[i] <- tp / (tp + fn)
spec[i] <- tn / (tn + fp)
}
# Create a tibble with the results
roc_tibble <- tibble(
threshold = thresholds,
specificity = spec,
sensitivity = sens,
tp = tp,
fp = fp,
fn = fn,
tn = tn
)
return(roc_tibble)
}
## Test function
df <- tibble(
obs = rep(factor(c("A")), each = 2),
A = rep(c(1), each = 2)
)
get_ROC(df$obs, df$A)
## Test function
df <- tibble(
obs = rep(factor(c("B")), each = 2),
A = rep(c(1), each = 2)
)
get_ROC(df$obs, df$A)
## Test function
df <- tibble(
obs = rep((c("B")), each = 2),
A = rep(c(1), each = 2)
)
get_ROC(df$obs, df$A)
## Test function
df <- tibble(
obs = rep(factor(c("B")), each = 2),
A = rep(c(1), each = 2)
)
get_ROC(df$obs, df$A)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.3, 0.7), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.3, 0.7), each = 2)
)
yardstick::roc_curve()
yardstick::roc_curve(df)
yardstick::roc_curve(df, truth = obs, A)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.3, 0.7), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
## Test function
df <- tibble(
obs = rep(factor(c("B")), each = 2),
A = rep(c(0.7), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
"A"
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0, 1), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(1, 1), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.3, 0.9), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.3, 0.3), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
get_ROC <- function(obs, A) {
# Check input types
if (!is.factor(obs)) {
stop("obs should be a factor.")
}
if (!is.numeric(A)) {
stop("pred should be a numeric vector.")
}
if (length(obs) != length(A)) {
stop("obs and A should have the same length.")
}
# Check input values
if (length(levels(obs)) != 2 || !all(levels(obs) %in% c("A", "B"))) {
stop("obs should have exactly two levels: 'A' and 'B'.")
}
if (any(A < 0 | A > 1)) {
stop("A should contain values between 0 and 1.")
}
# Create a dataframe with 2 variables: 'obs' and 'pred'
data <- tibble(
obs = factor(obs),
pred = A
)
# Sort predicted probabilities
data <- data %>% arrange(pred)
# Initialize vectors for thresholds, specificity, and sensitivity
thresholds <- c(-Inf, data$pred, Inf)
sens <- numeric(length(thresholds))
spec <- numeric(length(thresholds))
# Calculate sensitivity and specificity at each threshold
for (i in seq_along(thresholds)) {
threshold <- thresholds[i]
tp <- sum(data$pred >= threshold & data$obs == "A")
fp <- sum(data$pred >= threshold & data$obs == "B")
fn <- sum(data$pred < threshold & data$obs == "A")
tn <- sum(data$pred < threshold & data$obs == "B")
sens[i] <- tp / (tp + fn)
spec[i] <- tn / (tn + fp)
}
# Create a tibble with the results
roc_tibble <- tibble(
threshold = thresholds,
specificity = spec,
sensitivity = sens,
tp = tp,
fp = fp,
fn = fn,
tn = tn
)
# Remove duplicate rows
roc_tibble <- roc_tibble[!duplicated(roc_tibble),]
return(roc_tibble)
}
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.3, 0.3), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.3, 0.7, 0.9, 0.4))
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
## Test function
df <- tibble(
obs = rep(factor(c("A", "B")), each = 2),
A = rep(c(0.8, 0.2), each = 2)
)
get_ROC(df$obs, df$A)
yardstick::roc_curve(df, truth = obs, A)
